using System;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramEncryptionBot.Database;
using TelegramEncryptionBot.Crypto;

namespace TelegramEncryptionBot.Commands
{
    public static class CommandsHandler
    {
        public static async Task HandleMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var text = message.Text;
            var chatId = message.Chat.Id;

            // –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if (text == "/start")
            {
                await botClient.SendTextMessageAsync(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —à–∏—Ñ—Ä–æ–≤—â–∏–∫ üîí. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π Telegram —Ç–µ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):", cancellationToken: cancellationToken);
            }
            else if (text.StartsWith("@") && !Database.UserExists(text))
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram —Ç–µ–≥
                var tgTag = text;
                Database.AddChatData(tgTag, "", "");  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç—ã–º–∏
                await botClient.SendTextMessageAsync(chatId, "üîë –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–µ–±–µ –∫–ª—é—á.", cancellationToken: cancellationToken);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞
                var replyMarkup = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üñäÔ∏è –í–≤–µ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á", "custom_key"),
                        InlineKeyboardButton.WithCallbackData("üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π", "random_key")
                    }
                });
                await botClient.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞:", replyMarkup: replyMarkup, cancellationToken: cancellationToken);
            }
            else if (Database.UserExists(text))
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –≠—Ç–æ—Ç Telegram —Ç–µ–≥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.", cancellationToken: cancellationToken);
            }
        }

        public static async Task HandleCallbackQueryAsync(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var chatId = callbackQuery.Message.Chat.Id;
            var tgTag = callbackQuery.From.Username;

            if (callbackQuery.Data == "custom_key")
            {
                await botClient.SendTextMessageAsync(chatId, "üñäÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á:", cancellationToken: cancellationToken);
                Database.SetUserStage(tgTag, "waiting_for_custom_key");
            }
            else if (callbackQuery.Data == "random_key")
            {
                var randomKey = Database.GenerateRandomHexKey();
                Database.SetDefaultKey(tgTag, randomKey);
                await botClient.SendTextMessageAsync(chatId, $"üéâ –í–∞—à –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.", cancellationToken: cancellationToken);
            }
        }

        public static async Task HandleCustomKeyMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var tgTag = message.From.Username;
            var customKey = message.Text;
            Database.SetDefaultKey(tgTag, customKey);
            Database.SetUserStage(tgTag, "registered");
            await botClient.SendTextMessageAsync(message.Chat.Id, "üîê –í–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.", cancellationToken: cancellationToken);
        }
    }
}
