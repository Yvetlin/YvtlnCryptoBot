using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramEncryptionBot.Crypto;

namespace TelegramEncryptionBot.Commands
{
    public static class CommandsHandler
    {
        private static string encryptionKey = "default";
        private static bool isEncryptionMode = true;
        private static bool isAwaitingCustomKey = false; // –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞

        public static async Task HandleMessageAsync(ITelegramBotClient botClient, Message? message)
        {
            if (message?.Text == null)
                return;

            // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            if (message.Text == "/start" || message.Text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            {
                isAwaitingCustomKey = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
                var replyKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üîí –®–∏—Ñ—Ä–æ–≤–∫–∞", "encrypt"),
                        InlineKeyboardButton.WithCallbackData("üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞", "decrypt")
                    }
                });

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –±–æ—Ç, –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —à–∏—Ñ—Ä–æ–≤–∫—É –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π!",
                    replyMarkup: replyKeyboard
                );
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            else if (message.Text == "üîí –®–∏—Ñ—Ä–æ–≤–∫–∞" || message.Text == "üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞")
            {
                isEncryptionMode = message.Text == "üîí –®–∏—Ñ—Ä–æ–≤–∫–∞";
                isAwaitingCustomKey = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞

                var replyKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á", "default_key"),
                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á", "custom_key")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
                    }
                });

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex.",
                    replyMarkup: replyKeyboard
                );
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
            else if (isAwaitingCustomKey)
            {
                encryptionKey = message.Text;
                isAwaitingCustomKey = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞

                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å."
                );
            }
            // –®–∏—Ñ—Ä–æ–≤–∫–∞ –∏–ª–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            else
            {
                try
                {
                    var cipher = new IdeaCipher(encryptionKey, isEncryptionMode);
                    string resultMessage = isEncryptionMode ? cipher.Encrypt(message.Text) : cipher.Decrypt(message.Text);

                    var replyKeyboard = new InlineKeyboardMarkup(new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
                        }
                    });

                    string action = isEncryptionMode ? "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ" : "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ";
                    await botClient.SendTextMessageAsync(
                        chatId: message.Chat.Id,
                        text: $"{action} —Å–æ–æ–±—â–µ–Ω–∏–µ: {resultMessage}",
                        replyMarkup: replyKeyboard
                    );
                }
                catch (Exception ex)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: message.Chat.Id,
                        text: $"–û—à–∏–±–∫–∞: {ex.Message}",
                        replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"))
                    );
                }
            }
        }

        public static async Task HandleCallbackQueryAsync(ITelegramBotClient botClient, CallbackQuery callbackQuery)
        {
            if (callbackQuery.Message == null)
                return;

            switch (callbackQuery.Data)
            {
                case "encrypt":
                    isEncryptionMode = true;
                    isAwaitingCustomKey = false;
                    await HandleMessageAsync(botClient, new Message { Chat = callbackQuery.Message.Chat, Text = "üîí –®–∏—Ñ—Ä–æ–≤–∫–∞" });
                    break;
                case "decrypt":
                    isEncryptionMode = false;
                    isAwaitingCustomKey = false;
                    await HandleMessageAsync(botClient, new Message { Chat = callbackQuery.Message.Chat, Text = "üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞" });
                    break;
                case "default_key":
                    encryptionKey = "0A1B2C3D4E5F67890A1B2C3D4E5F6789";
                    isAwaitingCustomKey = false;
                    await botClient.SendTextMessageAsync(callbackQuery.Message.Chat.Id, "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
                    break;
                case "custom_key":
                    isAwaitingCustomKey = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
                    await botClient.SendTextMessageAsync(callbackQuery.Message.Chat.Id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex.");
                    break;
                case "main_menu":
                    isAwaitingCustomKey = false;
                    await HandleMessageAsync(botClient, new Message { Chat = callbackQuery.Message.Chat, Text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" });
                    break;
            }
            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id);
        }
    }
}
