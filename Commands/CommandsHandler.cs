using System;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TelegramEncryptionBot.Database;
using TelegramEncryptionBot.Crypto;

namespace TelegramEncryptionBot.Commands
{
    public static class CommandsHandler
    {
        public static async Task HandleMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var text = message.Text;
            var chatId = message.Chat.Id;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if (text == "/start")
            {
                var tgTag = message.From.Username;
                if (!DatabaseManager.UserExists(tgTag))
                {
                    DatabaseManager.AddChatData(tgTag, "", "");
                    await botClient.SendTextMessageAsync(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —É–∫–∞–∑–∞–≤ —Å–≤–æ–π Telegram —Ç–µ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):", cancellationToken: cancellationToken);
                }
                else
                {
                    await botClient.SendTextMessageAsync(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", cancellationToken: cancellationToken);
                    await SendMainMenu(botClient, chatId, cancellationToken);
                }
            }
            else if (DatabaseManager.GetUserStage(text) == "waiting_for_custom_key")
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª—é—á
                DatabaseManager.SetDefaultKey(text, text);
                await botClient.SendTextMessageAsync(chatId, "üîê –í–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", cancellationToken: cancellationToken);
                await SendMainMenu(botClient, chatId, cancellationToken);
            }
            else
            {
                await botClient.SendTextMessageAsync(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.", cancellationToken: cancellationToken);
            }
        }

        public static async Task HandleCallbackQueryAsync(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var chatId = callbackQuery.Message.Chat.Id;
            var tgTag = callbackQuery.From.Username;

            switch (callbackQuery.Data)
            {
                case "change_key":
                    // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Å–ª—É—á–∞–π–Ω—ã–º –∫–ª—é—á–æ–º –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º
                    var replyMarkup = new InlineKeyboardMarkup(new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üñäÔ∏è –í–≤–µ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á", "set_custom_key"),
                            InlineKeyboardButton.WithCallbackData("üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á", "set_random_key")
                        }
                    });
                    await botClient.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞:", replyMarkup: replyMarkup, cancellationToken: cancellationToken);
                    break;

                case "set_custom_key":
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª—é—á–∞
                    await botClient.SendTextMessageAsync(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á:", cancellationToken: cancellationToken);
                    DatabaseManager.SetUserStage(tgTag, "waiting_for_custom_key");
                    break;

                case "set_random_key":
                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞
                    var randomKey = DatabaseManager.GenerateRandomHexKey();
                    DatabaseManager.SetDefaultKey(tgTag, randomKey);
                    await botClient.SendTextMessageAsync(chatId, $"üéâ –í–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {randomKey}", cancellationToken: cancellationToken);
                    await SendMainMenu(botClient, chatId, cancellationToken);
                    break;

                case "encrypt":
                    await botClient.SendTextMessageAsync(chatId, "üîí –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", cancellationToken: cancellationToken);
                    DatabaseManager.SetUserStage(tgTag, "waiting_for_encryption_text");
                    break;

                case "decrypt":
                    await botClient.SendTextMessageAsync(chatId, "üîì –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", cancellationToken: cancellationToken);
                    DatabaseManager.SetUserStage(tgTag, "waiting_for_decryption_text");
                    break;

                default:
                    await botClient.SendTextMessageAsync(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.", cancellationToken: cancellationToken);
                    await SendMainMenu(botClient, chatId, cancellationToken);
                    break;
            }
        }

        public static async Task SendMainMenu(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var replyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª—é—á", "change_key"),
                    InlineKeyboardButton.WithCallbackData("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "encrypt"),
                    InlineKeyboardButton.WithCallbackData("–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "decrypt")
                }
            });

            await botClient.SendTextMessageAsync(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:", replyMarkup: replyMarkup, cancellationToken: cancellationToken);
        }
    }
}
